package boj;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/*
n*n의 크기의 대나무 숲이 있다. 욕심쟁이 판다는 어떤 지역에서 대나무를 먹기 시작한다. 
그리고 그 곳의 대나무를 다 먹어 치우면 상, 하, 좌, 우 중 한 곳으로 이동을 한다. 
그리고 또 그곳에서 대나무를 먹는다. 그런데 단 조건이 있다.
이 판다는 매우 욕심이 많아서 대나무를 먹고 자리를 옮기면 그 옮긴 지역에 그 전 지역보다 대나무가 많이 있어야 한다.
만약에 그런 지점이 없으면 이 판다는 불만을 가지고 단식 투쟁을 하다가 죽게 된다(-_-)

이 판다의 사육사는 이런 판다를 대나무 숲에 풀어 놓아야 하는데, 어떤 지점에 처음에 풀어 놓아야 하고, 
어떤 곳으로 이동을 시켜야 둘 다 소중한 생명이지만 판다가 최대한 오래 살 수 있는지 고민에 빠져 있다. 
우리의 임무는 이 사육사를 도와주는 것이다. n*n 크기의 대나무 숲이 주어져 있을 때, 이 판다가 최대한 오래 살려면 어떤 경로를 통하여 움직여야 하는지 구하여라.

4
14 9 12 10
1 11 5 4
7 15 2 13
6 3 16 8

4
14 9 12 10
1 11 5 4
7 2 2 2
6 3 2 8

*/
public class p1937 {
	
	static int N;
	static int max;
	static int [][] nArr;
	static int [][] maxArr;
	static int[] pX = {1, -1, 0, 0};
	static int[] pY = {0, 0, 1, -1};
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		nArr = new int[N][N];
		maxArr = new int[N][N];
		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++)
				nArr[i][j] = Integer.parseInt(st.nextToken());
		}
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				max = (max < execDFS(i, j)) ? execDFS(i, j) : max;
			}
		}
		System.out.println(max + 1);
	}
	
	public static int execDFS(int row, int col){
		if(maxArr[row][col] != 0)
			return maxArr[row][col];
		for (int i = 0; i < 4; i++) {
			int nRow = row + pX[i];
			int nCol = col + pY[i];
			
			if(nRow >= 0 && nCol >= 0 && nRow < N && nCol < N 
					&& nArr[nRow][nCol] > nArr[row][col]){
				maxArr[row][col] = Math.max(execDFS(nRow, nCol) + 1, maxArr[row][col]);
			}
		}
		return maxArr[row][col];
	}
}

